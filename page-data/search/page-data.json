{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"풀이 시간 복잡도 O(N * W)  총 단어 개수(N) 중 해당 길이(W) 만큼 연산 발생","fields":{"slug":"/baekjoon_test2/"},"frontmatter":{"date":"January 13, 2025","title":"🐶 백준 알고리즘 - 1316 그룹 단어 체커","tags":["Backjoon","Algorithm","구현","문자열"]},"rawMarkdownBody":"\n## 풀이\n<br/>\n\n```java\nimport java.io.*;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n        int number = Integer.parseInt(br.readLine()); // 단어 수\n        int count = 0; // 그룹 단어 수\n\n        for (int i = 0; i < number; i++) {\n            String input = br.readLine();\n            List<Character> charList = input.chars()\n                    .mapToObj(c -> (char)c)\n                    .collect(Collectors.toList());\n\n            if (groupWord(charList)) {\n                count++;\n            }\n        }\n        bw.write(count + \"\\n\");\n\n        bw.flush();\n        br.readLine();\n        bw.close();\n\n    }\n\n    // 그룹 단어 여부\n    public static boolean groupWord(List<Character> charList) {\n        Set<Character> seen = new HashSet<>(); // 등장한 문자를 저장하는 Set\n        char prev = charList.get(0); // 첫 번째 문자 저장\n\n        for (char c : charList) {\n            if (seen.contains(c) && prev != c) { // 이미 등장한 문자지만 연속되지 않은 경우\n                return false;\n            }\n            seen.add(c); // 현재 문자 저장\n            prev = c; // 이전 문자 업데이트\n        }\n        return true;\n    }\n}\n```\n\n### 시간 복잡도\n- O(N * W) \n  - 총 단어 개수(N) 중 해당 길이(W) 만큼 연산 발생\n\n[^1]: https://www.acmicpc.net/problem/1316\n\n"},{"excerpt":"풀이 시간 복잡도 O(N)","fields":{"slug":"/baekjoon_test/"},"frontmatter":{"date":"January 12, 2025","title":"🐶 백준 알고리즘 - 1152 단어의 개수","tags":["Backjoon","Algorithm","구현","문자열"]},"rawMarkdownBody":"\n## 풀이\n<br/>\n\n```java\nimport java.io.*;\nimport java.util.StringTokenizer;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n        \n        String text = br.readLine().trim(); // 입력받고 앞뒤 공백 제거\n        StringTokenizer st = new StringTokenizer(text, \" \"); // 공백 기준으로 토큰화\n\n        bw.write(String.valueOf(st.countTokens())); // 토큰 개수 출력\n        \n        bw.flush(); // 출력 버퍼 비우기\n        br.close(); // 자원 해제\n        bw.close(); // 자원 해제\n    }\n}\n```\n\n### 시간 복잡도\n- O(N)\n\n[^1]: https://www.acmicpc.net/problem/1152\n\n"},{"excerpt":"1. 클래스명은 Main, 이와같이 클래스명을 Main으로 두고 작성한다 2. Main 함수에서 바로 작성 시, 모든것은 static으로 선언 후 작성한다. main문 자체가 static 함수 이므로 내부에서 사용하는 전역변수 및 모든 함수 또한 static 이어야 한다. 3. 입력 값을 받을 땐 Scanner 보단 BufferedReader Scanne…","fields":{"slug":"/baekjoon_tips/"},"frontmatter":{"date":"January 11, 2025","title":"🐶 백준 알고리즘 팁","tags":["Backjoon","Algorithm"]},"rawMarkdownBody":"\n## 1. 클래스명은 Main,\n\n```java\npublic class Main {\n\t\n}\n```\n\n이와같이 클래스명을 Main으로 두고 작성한다\n\n## 2. Main 함수에서 바로 작성 시, 모든것은 static으로 선언 후 작성한다.\n\n```java\npublic class Main {\n\tprivate static int max = 0;\n\tprivate static int n, k;\n\t\n\tprivate static void dfs(int cnt, int num) {\n\t\n\t}\n}\n```\n\nmain문 자체가 static 함수 이므로 내부에서 사용하는 전역변수 및 모든 함수 또한 static 이어야 한다.\n\n## 3. 입력 값을 받을 땐 Scanner 보단 BufferedReader\n\n```java\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class Main {\n\tpublic void solution() throws Exeption {\n\t\t BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t int n = Integer.parseInt(br.readLine());\n\t}\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tnew Main().solution();\n\t}\n}\n```\n\nScanner는 내부적으로 다음 입력값을 찾을 때 정규식을 사용해 속도가 느리다.\n\n## 4.문자열 구분\n\nString 문자열 구분 시 split()보단 StringTokenizer를 사용하는 것이 속도가 더 빠르다.\n\n```java\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\npublic class Main {\n    public void solution() throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        \n        for (int i = 0; i < n; i++) {\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int s = Integer.parseInt(st.nextToken());\n\n            for (int j = 0; j < s; j++) {\n                int data = Integer.parseInt(st.nextToken());\n                System.out.println(data);\n            }\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        new Main().solution();\n    }\n}\n\n```\n\n위와 같이 BufferedReader와 StringTokenizer로 입력받는다면 빠르게 입력받을 수 있다.\n\n## 5. 입력을 위한 클래스는 하나만\n\n- System.in이 들어간 클래스는 단 하나만 생성하는 것이 좋다.\n\n## 6. 출력 시 System.out.printIn() 보다 BufferedWriter가 빠르다\n\n```java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.util.StringTokenizer;\n\npublic class Main {\n    public void solution() throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n        int n = Integer.parseInt(br.readLine());\n\n        for (int i = 0; i < n; i++) {\n            StringTokenizer st = new StringTokenizer(br.readLine()); // 토큰화\n            int s = Integer.parseInt(st.nextToken());\n\n            for (int j = 0; j < s; j++) {\n                int data = Integer.parseInt(st.nextToken());\n                bw.write(String.valueOf(data)); // 출력\n                bw.newLine(); // 줄바꿈            }\n        }\n\n        bw.flush(); // 출력 버퍼 비우기\n        br.close(); // 자원 해제\n        bw.close(); // 자원 해제\n    }\n\n    public static void main(String[] args) throws Exception {\n        new Main().solution();\n    }\n}\n\n```"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}